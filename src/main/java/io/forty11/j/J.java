/*
 * Copyright 2008-2017 Wells Burke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.forty11.j;

/**
 * Collection of utility methods designed simplify Java programming.
 *
 * This class is automatically generated by <code>Gen</code> and should
 * not really be edited by hand.  Add the @ApiMethod annotation to any
 * public static method you want Gen to included in its output.
 *
 * @author Wells Burke
 */
public class J
{
   /*
   +------------------------------------------------------------------------------+
   | Start Genreated Code
   +------------------------------------------------------------------------------+
   */

   /**
    * Creats a list from varargs
    * 
    * @param array
    * @see io.forty11.j.api.Lang#asList(class [Ljava.lang.Object; array)
    */
   public static java.util.List asList(java.lang.Object... array)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(array);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience to turn an Iterable into a list
    * 
    * @param it
    * @see io.forty11.j.api.Lang#asList(interface java.lang.Iterable it)
    */
   public static java.util.List asList(java.lang.Iterable it)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(it);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience to turn an Iterator into a list
    * 
    * @param it
    * @see io.forty11.j.api.Lang#asList(interface java.util.Iterator it)
    */
   public static java.util.List asList(java.util.Iterator it)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(it);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param it
    * @see io.forty11.j.api.Lang#asList(class io.forty11.j.it.It it)
    */
   public static java.util.List asList(io.forty11.j.it.It it)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(it);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Double.parseDouble(str.trim()).  Null returned as -1
    * 
    * @param str
    * @see io.forty11.j.api.Lang#atod(class java.lang.String str)
    */
   public static double atod(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Lang.atod(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Float.parseFloat(str.trim()).  Null returned as -1
    * 
    * @param str
    * @see io.forty11.j.api.Lang#atof(class java.lang.String str)
    */
   public static float atof(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Lang.atof(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Integer.parseInt(str.trim()).  Null returned as -1
    * 
    * @param str
    * @see io.forty11.j.api.Lang#atoi(class java.lang.String str)
    */
   public static int atoi(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Lang.atoi(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Long.parseLong(str.trim()).  Null returned as -1
    * 
    * @param str
    * @see io.forty11.j.api.Lang#atol(class java.lang.String str)
    */
   public static long atol(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Lang.atol(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param node
    * @see io.forty11.j.api.Xml#childElements(interface org.w3c.dom.Node node)
    */
   public static java.util.List childElements(org.w3c.dom.Node node)
   {
      try
      {
         return io.forty11.j.api.Xml.childElements(node);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Limits line to <code>length</code> characters inclusive of "..." trailing characters indicating the string was in fact choppped
    * 
    * @param str
    * @param length
    * @see io.forty11.j.api.Strings#chop(class java.lang.String str, int length)
    */
   public static java.lang.String chop(java.lang.String str, int length)
   {
      try
      {
         return io.forty11.j.api.Strings.chop(str, length);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param path
    * @param index
    * @see io.forty11.j.api.Paths#chunk(class java.lang.String path, int index)
    */
   public static java.lang.String chunk(java.lang.String path, int index)
   {
      try
      {
         return io.forty11.j.api.Paths.chunk(path, index);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param path
    * @see io.forty11.j.api.Paths#chunks(class java.lang.String path)
    */
   public static java.lang.String[] chunks(java.lang.String path)
   {
      try
      {
         return io.forty11.j.api.Paths.chunks(path);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Utility to call an close() method on supplied objects and completely ignore any errors
    * 
    * @param toClose
    * @see io.forty11.j.api.Lang#close(class [Ljava.lang.Object; toClose)
    */
   public static void close(java.lang.Object... toClose)
   {
      try
      {
         io.forty11.j.api.Lang.close(toClose);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Shortcut for string.indexOf(target) >= 0 that checks for nulls
    * 
    * @param string
    * @param target
    * @see io.forty11.j.api.Strings#contains(class java.lang.String string, class java.lang.String target)
    */
   public static boolean contains(java.lang.String string, java.lang.String target)
   {
      try
      {
         return io.forty11.j.api.Strings.contains(string, target);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param src
    * @param dst
    * @see io.forty11.j.api.Files#copy(class java.io.File src, class java.io.File dst)
    */
   public static void copy(java.io.File src, java.io.File dst)
   {
      try
      {
         io.forty11.j.api.Files.copy(src, dst);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param srcDir
    * @param srcFile
    * @param dstDir
    * @see io.forty11.j.api.Files#copy(class java.io.File srcDir, class java.io.File srcFile, class java.io.File dstDir)
    */
   public static boolean copy(java.io.File srcDir, java.io.File srcFile, java.io.File dstDir)
   {
      try
      {
         return io.forty11.j.api.Files.copy(srcDir, srcFile, dstDir);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * A best effort field by field shallow copier that will ignore all errors. This does not recurse.
    * 
    * @param src
    * @param dest
    * @see io.forty11.j.api.Lang#copyFields(class java.lang.Object src, class java.lang.Object dest)
    */
   public static void copyFields(java.lang.Object src, java.lang.Object dest)
   {
      try
      {
         io.forty11.j.api.Lang.copyFields(src, dest);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @see io.forty11.j.api.Files#createTempFile(class java.io.File file)
    */
   public static java.io.File createTempFile(java.io.File file)
   {
      try
      {
         return io.forty11.j.api.Files.createTempFile(file);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param fileName
    * @see io.forty11.j.api.Files#createTempFile(class java.lang.String fileName)
    */
   public static java.io.File createTempFile(java.lang.String fileName)
   {
      try
      {
         return io.forty11.j.api.Files.createTempFile(fileName);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to apply a SimpleDateForamt without having to worry about Exceptions
    * 
    * @param date
    * @param format
    * @see io.forty11.j.api.Lang#date(class java.lang.String date, class java.lang.String format)
    */
   public static java.util.Date date(java.lang.String date, java.lang.String format)
   {
      try
      {
         return io.forty11.j.api.Lang.date(date, format);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts an ISO8601 data parse whic is yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm], then yyyy-MM-dd, then MM/dd/yy, then MM/dd/yyyy, then yyyyMMdd 
    * 
    * @param date
    * @see io.forty11.j.api.Lang#date(class java.lang.String date)
    */
   public static java.util.Date date(java.lang.String date)
   {
      try
      {
         return io.forty11.j.api.Lang.date(date);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @see io.forty11.j.api.Files#delete(class java.io.File file)
    */
   public static boolean delete(java.io.File file)
   {
      try
      {
         return io.forty11.j.api.Files.delete(file);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Checks for null or obj.toString().length() == 0
    * 
    * @param obj
    * @see io.forty11.j.api.Lang#empty(class java.lang.Object obj)
    */
   public static boolean empty(java.lang.Object obj)
   {
      try
      {
         return io.forty11.j.api.Lang.empty(obj);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Forgiving equality checker.  Test for strict == equaltiy, then .equals() equality, then .toString().equals() equality.  Either param can be null.
    * 
    * @param obj1
    * @param obj2
    * @see io.forty11.j.api.Lang#equal(class java.lang.Object obj1, class java.lang.Object obj2)
    */
   public static boolean equal(java.lang.Object obj1, java.lang.Object obj2)
   {
      try
      {
         return io.forty11.j.api.Lang.equal(obj1, obj2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Writes each object to System.err with a space between
    * 
    * @param obj
    * @see io.forty11.j.api.Streams#err(class [Ljava.lang.Object; obj)
    */
   public static void err(java.lang.Object... obj)
   {
      try
      {
         io.forty11.j.api.Streams.err(obj);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Same as String.split() but performes a trim() on each piece and returns an list instead of an array
    * 
    * @param str
    * @param delim
    * @see io.forty11.j.api.Strings#explode(class java.lang.String str, class java.lang.String delim)
    */
   public static java.util.List explode(java.lang.String str, java.lang.String delim)
   {
      try
      {
         return io.forty11.j.api.Strings.explode(str, delim);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param pathOrUrl
    * @see io.forty11.j.api.Files#file(class java.lang.String pathOrUrl)
    */
   public static java.io.File file(java.lang.String pathOrUrl)
   {
      try
      {
         return io.forty11.j.api.Files.file(pathOrUrl);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to locate the stream as a file, url, or classpath resource
    * 
    * @param fileOrUrl
    * @see io.forty11.j.api.Streams#findInputStream(class java.lang.String fileOrUrl)
    */
   public static java.io.InputStream findInputStream(java.lang.String fileOrUrl)
   {
      try
      {
         return io.forty11.j.api.Streams.findInputStream(fileOrUrl);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Simply calls stream.flush() but throws RuntimeException instead of IOException
    * 
    * @param stream
    * @see io.forty11.j.api.Streams#flush(interface java.io.Flushable stream)
    */
   public static void flush(java.io.Flushable stream)
   {
      try
      {
         io.forty11.j.api.Streams.flush(stream);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escape HTML special characters so this string can be displayed as text not marketup in an HTML document
    * 
    * @param aText
    * @see io.forty11.j.api.Strings#forHTML(class java.lang.String aText)
    */
   public static java.lang.String forHTML(java.lang.String aText)
   {
      try
      {
         return io.forty11.j.api.Strings.forHTML(aText);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escapes any regex specicial characters
    * 
    * @param aRegexFragment
    * @see io.forty11.j.api.Strings#forRegex(class java.lang.String aRegexFragment)
    */
   public static java.lang.String forRegex(java.lang.String aRegexFragment)
   {
      try
      {
         return io.forty11.j.api.Strings.forRegex(aRegexFragment);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Does URLEncoder.encode() but throws a RuntimeException instead of an UnsupportedEncodingException
    * 
    * @param aURLFragment
    * @see io.forty11.j.api.Strings#forURL(class java.lang.String aURLFragment)
    */
   public static java.lang.String forURL(java.lang.String aURLFragment)
   {
      try
      {
         return io.forty11.j.api.Strings.forURL(aURLFragment);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escape xml tag characters so that this can be rendered as text instead of markup when included in a xml/html document
    * 
    * @param aText
    * @see io.forty11.j.api.Strings#forXML(class java.lang.String aText)
    */
   public static java.lang.String forXML(java.lang.String aText)
   {
      try
      {
         return io.forty11.j.api.Strings.forXML(aText);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param date
    * @param format
    * @see io.forty11.j.api.Lang#formatDate(class java.util.Date date, class java.lang.String format)
    */
   public static java.lang.String formatDate(java.util.Date date, java.lang.String format)
   {
      try
      {
         return io.forty11.j.api.Lang.formatDate(date, format);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param date
    * @see io.forty11.j.api.Lang#formatDate(class java.util.Date date)
    */
   public static java.lang.String formatDate(java.util.Date date)
   {
      try
      {
         return io.forty11.j.api.Lang.formatDate(date);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to make a pretty title case string with spaces out of a camel case style string
    * 
    * @param string
    * @see io.forty11.j.api.Strings#fromCamelCase(class java.lang.String string)
    */
   public static java.lang.String fromCamelCase(java.lang.String string)
   {
      try
      {
         return io.forty11.j.api.Strings.fromCamelCase(string);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to "unwrap" nested exceptions looking for the root cause
    * 
    * @param t
    * @see io.forty11.j.api.Lang#getCause(class java.lang.Throwable t)
    */
   public static java.lang.Throwable getCause(java.lang.Throwable t)
   {
      try
      {
         return io.forty11.j.api.Lang.getCause(t);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param line
    * @see io.forty11.j.api.Lang#getClassFromStackLine(class java.lang.String line)
    */
   public static java.lang.Class getClassFromStackLine(java.lang.String line)
   {
      try
      {
         return io.forty11.j.api.Lang.getClassFromStackLine(line);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Searches the inheritance heirarchy for a field with the the given name and makes sure it is settable via Field.setAccesible
    * 
    * @param fieldName
    * @param clazz
    * @see io.forty11.j.api.Lang#getField(class java.lang.String fieldName, class java.lang.Class clazz)
    */
   public static java.lang.reflect.Field getField(java.lang.String fieldName, java.lang.Class clazz)
   {
      try
      {
         return io.forty11.j.api.Lang.getField(fieldName, clazz);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Gets all the fields from from all classes in the inheritance heirarchy EXCEPT for any class who's packages starts with "java"
    * 
    * @param clazz
    * @see io.forty11.j.api.Lang#getFields(class java.lang.Class clazz)
    */
   public static java.util.List getFields(java.lang.Class clazz)
   {
      try
      {
         return io.forty11.j.api.Lang.getFields(clazz);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience for System.getProperty("line.separator")
    * 
    * @see io.forty11.j.api.Shell#getLineSeparator()
    */
   public static java.lang.String getLineSeparator()
   {
      try
      {
         return io.forty11.j.api.Shell.getLineSeparator();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Searches the inheritance heirarchy for the first method of the given name (ignores case).  No distinction is made for overloaded method names.
    * 
    * @param clazz
    * @param name
    * @see io.forty11.j.api.Lang#getMethod(class java.lang.Class clazz, class java.lang.String name)
    */
   public static java.lang.reflect.Method getMethod(java.lang.Class clazz, java.lang.String name)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethod(clazz, name);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Same as calling Class.getMethod but it returns null intead of throwing a NoSuchMethodException
    * 
    * @param clazz
    * @param name
    * @param args
    * @see io.forty11.j.api.Lang#getMethod(class java.lang.Class clazz, class java.lang.String name, class [Ljava.lang.Class; args)
    */
   public static java.lang.reflect.Method getMethod(java.lang.Class clazz, java.lang.String name, java.lang.Class... args)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethod(clazz, name, args);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param line
    * @see io.forty11.j.api.Lang#getMethodNameFromStackLine(class java.lang.String line)
    */
   public static java.lang.String getMethodNameFromStackLine(java.lang.String line)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethodNameFromStackLine(line);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns all methods in the inheritance heirarchy with the given name
    * 
    * @param clazz
    * @param name
    * @see io.forty11.j.api.Lang#getMethods(class java.lang.Class clazz, class java.lang.String name)
    */
   public static java.util.List getMethods(java.lang.Class clazz, java.lang.String name)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethods(clazz, name);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience for System.getProperty("path.separator")
    * 
    * @see io.forty11.j.api.Shell#getPathSeparator()
    */
   public static java.lang.String getPathSeparator()
   {
      try
      {
         return io.forty11.j.api.Shell.getPathSeparator();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to find a bean property getter then defaults to returning the Field value
    * 
    * @param name
    * @param object
    * @see io.forty11.j.api.Lang#getProperty(class java.lang.String name, class java.lang.Object object)
    */
   public static java.lang.Object getProperty(java.lang.String name, java.lang.Object object)
   {
      try
      {
         return io.forty11.j.api.Lang.getProperty(name, object);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to find a bean property getter then tries Field value, then defaults to the supplied defaultVal
    * 
    * @param name
    * @param object
    * @param defaultVal
    * @see io.forty11.j.api.Lang#getProperty(class java.lang.String name, class java.lang.Object object, class java.lang.Object defaultVal)
    */
   public static java.lang.Object getProperty(java.lang.String name, java.lang.Object object, java.lang.Object defaultVal)
   {
      try
      {
         return io.forty11.j.api.Lang.getProperty(name, object, defaultVal);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param t
    * @param lines
    * @see io.forty11.j.api.Lang#getShortCause(class java.lang.Throwable t, int lines)
    */
   public static java.lang.String getShortCause(java.lang.Throwable t, int lines)
   {
      try
      {
         return io.forty11.j.api.Lang.getShortCause(t, lines);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param t
    * @see io.forty11.j.api.Lang#getShortCause(class java.lang.Throwable t)
    */
   public static java.lang.String getShortCause(java.lang.Throwable t)
   {
      try
      {
         return io.forty11.j.api.Lang.getShortCause(t);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param stackTrace
    * @see io.forty11.j.api.Lang#getStackTraceLines(class java.lang.Throwable stackTrace)
    */
   public static java.util.List getStackTraceLines(java.lang.Throwable stackTrace)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceLines(stackTrace);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param t
    * @see io.forty11.j.api.Lang#getStackTraceString(class java.lang.Thread t)
    */
   public static java.lang.String getStackTraceString(java.lang.Thread t)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(t);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param stackTrace
    * @see io.forty11.j.api.Lang#getStackTraceString(class java.lang.Throwable stackTrace)
    */
   public static java.lang.String getStackTraceString(java.lang.Throwable stackTrace)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(stackTrace);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param t
    * @param stackTrace
    * @see io.forty11.j.api.Lang#getStackTraceString(class java.lang.Thread t, class [Ljava.lang.StackTraceElement; stackTrace)
    */
   public static java.lang.String getStackTraceString(java.lang.Thread t, java.lang.StackTraceElement[] stackTrace)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(t, stackTrace);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with the given algorithm
    * 
    * @param byteArr
    * @param algorithm
    * @see io.forty11.j.api.Strings#hash(class [B byteArr, class java.lang.String algorithm)
    */
   public static java.lang.String hash(byte[] byteArr, java.lang.String algorithm)
   {
      try
      {
         return io.forty11.j.api.Strings.hash(byteArr, algorithm);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Concatenates pieces[0] + glue + pieces[n]...
    * 
    * @param glue
    * @param pieces
    * @see io.forty11.j.api.Strings#implode(class java.lang.String glue, class [Ljava.lang.Object; pieces)
    */
   public static java.lang.String implode(java.lang.String glue, java.lang.Object... pieces)
   {
      try
      {
         return io.forty11.j.api.Strings.implode(glue, pieces);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Prepends spaces to the begining of each line
    * 
    * @param str
    * @param indent
    * @see io.forty11.j.api.Strings#indent(class java.lang.String str, int indent)
    */
   public static java.lang.String indent(java.lang.String str, int indent)
   {
      try
      {
         return io.forty11.j.api.Strings.indent(str, indent);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @see io.forty11.j.api.Files#isLink(class java.io.File file)
    */
   public static boolean isLink(java.io.File file)
   {
      try
      {
         return io.forty11.j.api.Files.isLink(file);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns true if the string contains a * or a ?
    * 
    * @param str
    * @see io.forty11.j.api.Strings#isWildcard(class java.lang.String str)
    */
   public static boolean isWildcard(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Strings.isWildcard(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param text
    * @param limit
    * @see io.forty11.j.api.Lang#limitLines(class java.lang.String text, int limit)
    */
   public static java.lang.String limitLines(java.lang.String text, int limit)
   {
      try
      {
         return io.forty11.j.api.Lang.limitLines(text, limit);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param dir
    * @see io.forty11.j.api.Files#listFiles(class java.io.File dir)
    */
   public static io.forty11.j.it.It listFiles(java.io.File dir)
   {
      try
      {
         return io.forty11.j.api.Files.listFiles(dir);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param stream
    * @see io.forty11.j.api.Xml#loadXml(class java.io.InputStream stream)
    */
   public static org.w3c.dom.Document loadXml(java.io.InputStream stream)
   {
      try
      {
         return io.forty11.j.api.Xml.loadXml(stream);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param textOrUrl
    * @see io.forty11.j.api.Xml#loadXml(class java.lang.String textOrUrl)
    */
   public static org.w3c.dom.Document loadXml(java.lang.String textOrUrl)
   {
      try
      {
         return io.forty11.j.api.Xml.loadXml(textOrUrl);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with MD5
    * 
    * @param bytes
    * @see io.forty11.j.api.Strings#md5(class [B bytes)
    */
   public static java.lang.String md5(byte[] bytes)
   {
      try
      {
         return io.forty11.j.api.Strings.md5(bytes);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param node
    * @see io.forty11.j.api.Xml#nodePath(interface org.w3c.dom.Node node)
    */
   public static java.lang.String nodePath(org.w3c.dom.Node node)
   {
      try
      {
         return io.forty11.j.api.Xml.nodePath(node);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Writes each object to System.out with a space between
    * 
    * @param obj
    * @see io.forty11.j.api.Streams#out(class [Ljava.lang.Object; obj)
    */
   public static void out(java.lang.Object... obj)
   {
      try
      {
         io.forty11.j.api.Streams.out(obj);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Appends spaces until the string is at least <code>length</code> characters long
    * 
    * @param str
    * @param length
    * @see io.forty11.j.api.Strings#pad(class java.lang.String str, int length)
    */
   public static java.lang.String pad(java.lang.String str, int length)
   {
      try
      {
         return io.forty11.j.api.Strings.pad(str, length);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tokenizes the string using " to enclose strings with spaces and \ to escape quotes in a string or other literal backslashes
    * 
    * @param args
    * @see io.forty11.j.utils.Args#parse(class java.lang.String args)
    */
   public static java.lang.String[] parse(java.lang.String args)
   {
      try
      {
         return io.forty11.j.utils.Args.parse(args);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param obj
    * @see io.forty11.j.api.Paths#path(class java.lang.Object obj)
    */
   public static java.lang.String path(java.lang.Object obj)
   {
      try
      {
         return io.forty11.j.api.Paths.path(obj);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns a path string for file makeing sure that the string ends with a / if the file is a directory
    * 
    * @param file
    * @see io.forty11.j.api.Paths#path(class java.io.File file)
    */
   public static java.lang.String path(java.io.File file)
   {
      try
      {
         return io.forty11.j.api.Paths.path(file);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to normalize a file path reference removing redundant wild cards and normalizing to "/" as the separator
    * 
    * @param path
    * @see io.forty11.j.api.Paths#path(class java.lang.String path)
    */
   public static java.lang.String path(java.lang.String path)
   {
      try
      {
         return io.forty11.j.api.Paths.path(path);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param dir
    * @see io.forty11.j.api.Paths#paths(class java.io.File dir)
    */
   public static io.forty11.j.it.PathIt paths(java.io.File dir)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(dir);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param url
    * @see io.forty11.j.api.Paths#paths(class java.net.URL url)
    */
   public static io.forty11.j.it.PathIt paths(java.net.URL url)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(url);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param path
    * @see io.forty11.j.api.Paths#paths(class java.lang.String path)
    */
   public static io.forty11.j.it.PathIt paths(java.lang.String path)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(path);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param zip
    * @see io.forty11.j.api.Paths#paths(class java.util.zip.ZipFile zip)
    */
   public static io.forty11.j.it.PathIt paths(java.util.zip.ZipFile zip)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(zip);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Copy all data from src to dst and close the streams
    * 
    * @param src
    * @param dest
    * @see io.forty11.j.api.Streams#pipe(class java.io.InputStream src, class java.io.OutputStream dest)
    */
   public static void pipe(java.io.InputStream src, java.io.OutputStream dest)
   {
      try
      {
         io.forty11.j.api.Streams.pipe(src, dest);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Copy all data from src to dst and close the reader/writer
    * 
    * @param src
    * @param dest
    * @see io.forty11.j.api.Streams#pipe(class java.io.Reader src, class java.io.Writer dest)
    */
   public static void pipe(java.io.Reader src, java.io.Writer dest)
   {
      try
      {
         io.forty11.j.api.Streams.pipe(src, dest);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to locate the stream as a file, url, or classpath resource and then reads it all as a string
    * 
    * @param fileOrUrl
    * @see io.forty11.j.api.Streams#read(class java.lang.String fileOrUrl)
    */
   public static java.lang.String read(java.lang.String fileOrUrl)
   {
      try
      {
         return io.forty11.j.api.Streams.read(fileOrUrl);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Read all of the stream to a string and close the stream.  Throws RuntimeException instead of IOException
    * 
    * @param in
    * @see io.forty11.j.api.Streams#read(class java.io.InputStream in)
    */
   public static java.lang.String read(java.io.InputStream in)
   {
      try
      {
         return io.forty11.j.api.Streams.read(in);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @see io.forty11.j.api.Files#read(class java.io.File file)
    */
   public static java.lang.String read(java.io.File file)
   {
      try
      {
         return io.forty11.j.api.Files.read(file);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Performs string.matches() but also checks for null
    * 
    * @param regex
    * @param string
    * @see io.forty11.j.api.Strings#regexMatch(class java.lang.String regex, class java.lang.String string)
    */
   public static boolean regexMatch(java.lang.String regex, java.lang.String string)
   {
      try
      {
         return io.forty11.j.api.Strings.regexMatch(regex, string);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param string
    * @param target
    * @param replacement
    * @see io.forty11.j.api.Strings#replace(class java.lang.String string, class java.lang.String target, class java.lang.String replacement)
    */
   public static java.lang.String replace(java.lang.String string, java.lang.String target, java.lang.String replacement)
   {
      try
      {
         return io.forty11.j.api.Strings.replace(string, target, replacement);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Replaces ${key} style text literals in str with values from the map
    * 
    * @param str
    * @param values
    * @see io.forty11.j.api.Strings#replaceAll(class java.lang.String str, interface java.util.Map values)
    */
   public static java.lang.String replaceAll(java.lang.String str, java.util.Map values)
   {
      try
      {
         return io.forty11.j.api.Strings.replaceAll(str, values);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param message
    * @param ex
    * @see io.forty11.j.api.Lang#rethrow(class java.lang.String message, class java.lang.Throwable ex)
    */
   public static void rethrow(java.lang.String message, java.lang.Throwable e)
   {
      try
      {
         io.forty11.j.api.Lang.rethrow(message, e);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param ex
    * @see io.forty11.j.api.Lang#rethrow(class java.lang.Throwable ex)
    */
   public static void rethrow(java.lang.Throwable e)
   {
      try
      {
         io.forty11.j.api.Lang.rethrow(e);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @param cmd
    * @see io.forty11.j.api.Shell#run(class java.lang.String cmd)
    */
   public static java.lang.String run(java.lang.String cmd)
   {
      try
      {
         return io.forty11.j.api.Shell.run(cmd);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @param cmd
    * @see io.forty11.j.api.Shell#run(interface java.util.List cmd)
    */
   public static java.lang.String run(java.util.List cmd)
   {
      try
      {
         return io.forty11.j.api.Shell.run(cmd);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @param cmd
    * @see io.forty11.j.api.Shell#run(class [Ljava.lang.String; cmd)
    */
   public static java.lang.String run(java.lang.String... cmd)
   {
      try
      {
         return io.forty11.j.api.Shell.run(cmd);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Finds the Field in the inheritance heirarchy and sets it
    * 
    * @param name
    * @param value
    * @param o
    * @see io.forty11.j.api.Lang#setField(class java.lang.String name, class java.lang.Object value, class java.lang.Object o)
    */
   public static void setField(java.lang.String name, java.lang.Object value, java.lang.Object o)
   {
      try
      {
         io.forty11.j.api.Lang.setField(name, value, o);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with SHA-1
    * 
    * @param bytes
    * @see io.forty11.j.api.Strings#sha1(class [B bytes)
    */
   public static java.lang.String sha1(byte[] bytes)
   {
      try
      {
         return io.forty11.j.api.Strings.sha1(bytes);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Easy way to call Thread.sleep(long) without worrying about try/catch for InterruptedException
    * 
    * @param millis
    * @see io.forty11.j.api.Lang#sleep(long millis)
    */
   public static void sleep(long millis)
   {
      try
      {
         io.forty11.j.api.Lang.sleep(millis);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns a lower cased string replacing "[^a-z0-9]+" with "-"
    * 
    * @param str
    * @see io.forty11.j.api.Strings#slugify(class java.lang.String str)
    */
   public static java.lang.String slugify(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Strings.slugify(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param text
    * @see io.forty11.j.api.Lang#splitLines(class java.lang.String text)
    */
   public static java.lang.String[] splitLines(java.lang.String text)
   {
      try
      {
         return io.forty11.j.api.Lang.splitLines(text);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Lower case the first letter of the string
    * 
    * @param str
    * @see io.forty11.j.api.Strings#startLower(class java.lang.String str)
    */
   public static java.lang.String startLower(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Strings.startLower(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Upper case the first letter of the string
    * 
    * @param str
    * @see io.forty11.j.api.Strings#startUpper(class java.lang.String str)
    */
   public static java.lang.String startUpper(java.lang.String str)
   {
      try
      {
         return io.forty11.j.api.Strings.startUpper(str);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param fileName
    * @see io.forty11.j.api.Files#sterilizeFileName(class java.lang.String fileName)
    */
   public static java.lang.String sterilizeFileName(java.lang.String fileName)
   {
      try
      {
         return io.forty11.j.api.Files.sterilizeFileName(fileName);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param string
    * @param regex
    * @param group
    * @see io.forty11.j.api.Strings#substring(class java.lang.String string, class java.lang.String regex, int group)
    */
   public static java.lang.String substring(java.lang.String string, java.lang.String regex, int group)
   {
      try
      {
         return io.forty11.j.api.Strings.substring(string, regex, group);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Less typing to call System.currentTimeMillis()
    * 
    * @see io.forty11.j.api.Lang#time()
    */
   public static long time()
   {
      try
      {
         return io.forty11.j.api.Lang.time();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Return text with all '<' and '>' characters replaced by their escaped equivalents.
    * 
    * @param text
    * @see io.forty11.j.api.Strings#toDisableTags(class java.lang.String text)
    */
   public static java.lang.String toDisableTags(java.lang.String text)
   {
      try
      {
         return io.forty11.j.api.Strings.toDisableTags(text);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Pattern matches the string using ? to indicate any one single value and * to indicate any 0-n multiple values
    * 
    * @param wildcard
    * @param string
    * @see io.forty11.j.api.Strings#wildcardMatch(class java.lang.String wildcard, class java.lang.String string)
    */
   public static boolean wildcardMatch(java.lang.String wildcard, java.lang.String string)
   {
      try
      {
         return io.forty11.j.api.Strings.wildcardMatch(wildcard, string);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Converts a * and ? wildcard style patterns into regex style pattern
    * 
    * @param wildcard
    * @see io.forty11.j.api.Strings#wildcardToRegex(class java.lang.String wildcard)
    */
   public static java.lang.String wildcardToRegex(java.lang.String wildcard)
   {
      try
      {
         return io.forty11.j.api.Strings.wildcardToRegex(wildcard);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Performans a word wrap limiting each line to the specified number of characters
    * 
    * @param str
    * @param wrap
    * @see io.forty11.j.api.Strings#wrap(class java.lang.String str, int wrap)
    */
   public static java.lang.String wrap(java.lang.String str, int wrap)
   {
      try
      {
         return io.forty11.j.api.Strings.wrap(str, wrap);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @param text
    * @see io.forty11.j.api.Files#write(class java.io.File file, class java.lang.String text)
    */
   public static void write(java.io.File file, java.lang.String text)
   {
      try
      {
         io.forty11.j.api.Files.write(file, text);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @param file
    * @param text
    * @see io.forty11.j.api.Files#write(class java.lang.String file, class java.lang.String text)
    */
   public static void write(java.lang.String file, java.lang.String text)
   {
      try
      {
         io.forty11.j.api.Files.write(file, text);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /*
   +------------------------------------------------------------------------------+
   | End Generated Code
   +------------------------------------------------------------------------------+
   */
}
