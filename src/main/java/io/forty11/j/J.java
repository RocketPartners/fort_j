/*
 * Copyright 2008-2017 Wells Burke
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.forty11.j;

/**
 * Collection of utility methods designed simplify Java programming.
 *
 * This class is automatically generated by <code>Gen</code> and should
 * not really be edited by hand.  Add the @ApiMethod annotation to any
 * public static method you want Gen to included in its output.
 *
 * @author Wells Burke
 */
public class J
{

   /**
    * Creats a list from varargs
    * 
    * @see io.forty11.j.api.Lang#asList([Ljava.lang.Object;)
    */
   public static java.util.List asList(java.lang.Object... arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience to turn an Iterable into a list
    * 
    * @see io.forty11.j.api.Lang#asList(java.lang.Iterable)
    */
   public static java.util.List asList(java.lang.Iterable arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience to turn an Iterator into a list
    * 
    * @see io.forty11.j.api.Lang#asList(java.util.Iterator)
    */
   public static java.util.List asList(java.util.Iterator arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#asList(io.forty11.j.it.It)
    */
   public static java.util.List asList(io.forty11.j.it.It arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.asList(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Double.parseDouble(str.trim()).  Null returned as -1
    * 
    * @see io.forty11.j.api.Lang#atod(java.lang.String)
    */
   public static double atod(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.atod(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Float.parseFloat(str.trim()).  Null returned as -1
    * 
    * @see io.forty11.j.api.Lang#atof(java.lang.String)
    */
   public static float atof(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.atof(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Integer.parseInt(str.trim()).  Null returned as -1
    * 
    * @see io.forty11.j.api.Lang#atoi(java.lang.String)
    */
   public static int atoi(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.atoi(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to call Long.parseLong(str.trim()).  Null returned as -1
    * 
    * @see io.forty11.j.api.Lang#atol(java.lang.String)
    */
   public static long atol(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.atol(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Xml#childElements(org.w3c.dom.Node)
    */
   public static java.util.List childElements(org.w3c.dom.Node arg0)
   {
      try
      {
         return io.forty11.j.api.Xml.childElements(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Limits line to <code>length</code> characters inclusive of "..." trailing characters indicating the string was in fact choppped
    * 
    * @see io.forty11.j.api.Strings#chop(java.lang.String, int)
    */
   public static java.lang.String chop(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.chop(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#chunk(java.lang.String, int)
    */
   public static java.lang.String chunk(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Paths.chunk(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#chunks(java.lang.String)
    */
   public static java.lang.String[] chunks(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.chunks(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Utility to call an close() method on supplied objects and completely ignore any errors
    * 
    * @see io.forty11.j.api.Lang#close([Ljava.lang.Object;)
    */
   public static void close(java.lang.Object... arg0)
   {
      try
      {
         io.forty11.j.api.Lang.close(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Shortcut for string.indexOf(target) >= 0 that checks for nulls
    * 
    * @see io.forty11.j.api.Strings#contains(java.lang.String, java.lang.String)
    */
   public static boolean contains(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.contains(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#copy(java.io.File, java.io.File, java.io.File)
    */
   public static boolean copy(java.io.File arg0, java.io.File arg1, java.io.File arg2)
   {
      try
      {
         return io.forty11.j.api.Files.copy(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#copy(java.io.File, java.io.File)
    */
   public static void copy(java.io.File arg0, java.io.File arg1)
   {
      try
      {
         io.forty11.j.api.Files.copy(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * A best effort field by field shallow copier that will ignore all errors. This does not recurse.
    * 
    * @see io.forty11.j.api.Lang#copyFields(java.lang.Object, java.lang.Object)
    */
   public static void copyFields(java.lang.Object arg0, java.lang.Object arg1)
   {
      try
      {
         io.forty11.j.api.Lang.copyFields(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#createTempFile(java.io.File)
    */
   public static java.io.File createTempFile(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Files.createTempFile(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#createTempFile(java.lang.String)
    */
   public static java.io.File createTempFile(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.createTempFile(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts an ISO8601 data parse whic is yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm], then yyyy-MM-dd, then MM/dd/yy, then MM/dd/yyyy, then yyyyMMdd 
    * 
    * @see io.forty11.j.api.Lang#date(java.lang.String)
    */
   public static java.util.Date date(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.date(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Faster way to apply a SimpleDateForamt without having to worry about Exceptions
    * 
    * @see io.forty11.j.api.Lang#date(java.lang.String, java.lang.String)
    */
   public static java.util.Date date(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.date(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#delete(java.io.File)
    */
   public static boolean delete(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Files.delete(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Checks for null or obj.toString().length() == 0
    * 
    * @see io.forty11.j.api.Lang#empty(java.lang.Object)
    */
   public static boolean empty(java.lang.Object... arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.empty(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#encodeFileName(java.lang.String)
    */
   public static java.lang.String encodeFileName(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.encodeFileName(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Forgiving equality checker.  Test for strict == equaltiy, then .equals() equality, then .toString().equals() equality.  Either param can be null.
    * 
    * @see io.forty11.j.api.Lang#equal(java.lang.Object, java.lang.Object)
    */
   public static boolean equal(java.lang.Object arg0, java.lang.Object arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.equal(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Writes each object to System.err with a space between
    * 
    * @see io.forty11.j.api.Streams#err([Ljava.lang.Object;)
    */
   public static void err(java.lang.Object... arg0)
   {
      try
      {
         io.forty11.j.api.Streams.err(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Same as String.split() but performes a trim() on each piece and returns an list instead of an array
    * 
    * @see io.forty11.j.api.Strings#explode(java.lang.String, java.lang.String)
    */
   public static java.util.List explode(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.explode(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#file(java.lang.String)
    */
   public static java.io.File file(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.file(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to locate the stream as a file, url, or classpath resource
    * 
    * @see io.forty11.j.api.Streams#findInputStream(java.lang.String)
    */
   public static java.io.InputStream findInputStream(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Streams.findInputStream(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Simply calls stream.flush() but throws RuntimeException instead of IOException
    * 
    * @see io.forty11.j.api.Streams#flush(java.io.Flushable)
    */
   public static void flush(java.io.Flushable arg0)
   {
      try
      {
         io.forty11.j.api.Streams.flush(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escape HTML special characters so this string can be displayed as text not marketup in an HTML document
    * 
    * @see io.forty11.j.api.Strings#forHTML(java.lang.String)
    */
   public static java.lang.String forHTML(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.forHTML(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escapes any regex specicial characters
    * 
    * @see io.forty11.j.api.Strings#forRegex(java.lang.String)
    */
   public static java.lang.String forRegex(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.forRegex(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Does URLEncoder.encode() but throws a RuntimeException instead of an UnsupportedEncodingException
    * 
    * @see io.forty11.j.api.Strings#forURL(java.lang.String)
    */
   public static java.lang.String forURL(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.forURL(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Escape xml tag characters so that this can be rendered as text instead of markup when included in a xml/html document
    * 
    * @see io.forty11.j.api.Strings#forXML(java.lang.String)
    */
   public static java.lang.String forXML(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.forXML(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#formatDate(java.util.Date, java.lang.String)
    */
   public static java.lang.String formatDate(java.util.Date arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.formatDate(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#formatDate(java.util.Date)
    */
   public static java.lang.String formatDate(java.util.Date arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.formatDate(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to make a pretty title case string with spaces out of a camel case style string
    * 
    * @see io.forty11.j.api.Strings#fromCamelCase(java.lang.String)
    */
   public static java.lang.String fromCamelCase(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.fromCamelCase(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to "unwrap" nested exceptions looking for the root cause
    * 
    * @see io.forty11.j.api.Lang#getCause(java.lang.Throwable)
    */
   public static java.lang.Throwable getCause(java.lang.Throwable arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getCause(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getClassFromStackLine(java.lang.String)
    */
   public static java.lang.Class getClassFromStackLine(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getClassFromStackLine(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Searches the inheritance heirarchy for a field with the the given name and makes sure it is settable via Field.setAccesible
    * 
    * @see io.forty11.j.api.Lang#getField(java.lang.String, java.lang.Class)
    */
   public static java.lang.reflect.Field getField(java.lang.String arg0, java.lang.Class arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getField(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Gets all the fields from from all classes in the inheritance heirarchy EXCEPT for any class who's packages starts with "java"
    * 
    * @see io.forty11.j.api.Lang#getFields(java.lang.Class)
    */
   public static java.util.List getFields(java.lang.Class arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getFields(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#getFileBaseName(java.lang.String)
    */
   public static java.lang.String getFileBaseName(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.getFileBaseName(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#getFileExtension(java.lang.String)
    */
   public static java.lang.String getFileExtension(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.getFileExtension(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#getFileName(java.lang.String)
    */
   public static java.lang.String getFileName(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.getFileName(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#getFilePath(java.lang.String)
    */
   public static java.lang.String getFilePath(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.getFilePath(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience for System.getProperty("line.separator")
    * 
    * @see io.forty11.j.api.Shell#getLineSeparator()
    */
   public static java.lang.String getLineSeparator()
   {
      try
      {
         return io.forty11.j.api.Shell.getLineSeparator();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Searches the inheritance heirarchy for the first method of the given name (ignores case).  No distinction is made for overloaded method names.
    * 
    * @see io.forty11.j.api.Lang#getMethod(java.lang.Class, java.lang.String)
    */
   public static java.lang.reflect.Method getMethod(java.lang.Class arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethod(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Same as calling Class.getMethod but it returns null intead of throwing a NoSuchMethodException
    * 
    * @see io.forty11.j.api.Lang#getMethod(java.lang.Class, java.lang.String, [Ljava.lang.Class;)
    */
   public static java.lang.reflect.Method getMethod(java.lang.Class arg0, java.lang.String arg1, java.lang.Class... arg2)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethod(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getMethodNameFromStackLine(java.lang.String)
    */
   public static java.lang.String getMethodNameFromStackLine(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethodNameFromStackLine(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns all methods in the inheritance heirarchy with the given name
    * 
    * @see io.forty11.j.api.Lang#getMethods(java.lang.Class, java.lang.String)
    */
   public static java.util.List getMethods(java.lang.Class arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getMethods(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Convenience for System.getProperty("path.separator")
    * 
    * @see io.forty11.j.api.Shell#getPathSeparator()
    */
   public static java.lang.String getPathSeparator()
   {
      try
      {
         return io.forty11.j.api.Shell.getPathSeparator();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to find a bean property getter then defaults to returning the Field value
    * 
    * @see io.forty11.j.api.Lang#getProperty(java.lang.String, java.lang.Object)
    */
   public static java.lang.Object getProperty(java.lang.String arg0, java.lang.Object arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getProperty(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tries to find a bean property getter then tries Field value, then defaults to the supplied defaultVal
    * 
    * @see io.forty11.j.api.Lang#getProperty(java.lang.String, java.lang.Object, java.lang.Object)
    */
   public static java.lang.Object getProperty(java.lang.String arg0, java.lang.Object arg1, java.lang.Object arg2)
   {
      try
      {
         return io.forty11.j.api.Lang.getProperty(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getShortCause(java.lang.Throwable)
    */
   public static java.lang.String getShortCause(java.lang.Throwable arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getShortCause(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getShortCause(java.lang.Throwable, int)
    */
   public static java.lang.String getShortCause(java.lang.Throwable arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getShortCause(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getStackTraceLines(java.lang.Throwable)
    */
   public static java.util.List getStackTraceLines(java.lang.Throwable arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceLines(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getStackTraceString(java.lang.Throwable)
    */
   public static java.lang.String getStackTraceString(java.lang.Throwable arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getStackTraceString(java.lang.Thread)
    */
   public static java.lang.String getStackTraceString(java.lang.Thread arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#getStackTraceString(java.lang.Thread, [Ljava.lang.StackTraceElement;)
    */
   public static java.lang.String getStackTraceString(java.lang.Thread arg0, java.lang.StackTraceElement[] arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.getStackTraceString(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with the given algorithm
    * 
    * @see io.forty11.j.api.Strings#hash([B, java.lang.String)
    */
   public static java.lang.String hash(byte[] arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.hash(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Concatenates pieces[0] + glue + pieces[n]...
    * 
    * @see io.forty11.j.api.Strings#implode(java.lang.String, [Ljava.lang.Object;)
    */
   public static java.lang.String implode(java.lang.String arg0, java.lang.Object... arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.implode(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Prepends spaces to the begining of each line
    * 
    * @see io.forty11.j.api.Strings#indent(java.lang.String, int)
    */
   public static java.lang.String indent(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.indent(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#isLink(java.io.File)
    */
   public static boolean isLink(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Files.isLink(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns true if the string contains a * or a ?
    * 
    * @see io.forty11.j.api.Strings#isWildcard(java.lang.String)
    */
   public static boolean isWildcard(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.isWildcard(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#limitLines(java.lang.String, int)
    */
   public static java.lang.String limitLines(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Lang.limitLines(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#listFiles(java.io.File)
    */
   public static io.forty11.j.it.It listFiles(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Files.listFiles(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Xml#loadXml(java.io.InputStream)
    */
   public static org.w3c.dom.Document loadXml(java.io.InputStream arg0)
   {
      try
      {
         return io.forty11.j.api.Xml.loadXml(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Xml#loadXml(java.lang.String)
    */
   public static org.w3c.dom.Document loadXml(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Xml.loadXml(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with MD5
    * 
    * @see io.forty11.j.api.Strings#md5([B)
    */
   public static java.lang.String md5(byte[] arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.md5(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Xml#nodePath(org.w3c.dom.Node)
    */
   public static java.lang.String nodePath(org.w3c.dom.Node arg0)
   {
      try
      {
         return io.forty11.j.api.Xml.nodePath(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Writes each object to System.out with a space between
    * 
    * @see io.forty11.j.api.Streams#out([Ljava.lang.Object;)
    */
   public static void out(java.lang.Object... arg0)
   {
      try
      {
         io.forty11.j.api.Streams.out(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Appends spaces until the string is at least <code>length</code> characters long
    * 
    * @see io.forty11.j.api.Strings#pad(java.lang.String, int)
    */
   public static java.lang.String pad(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.pad(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Tokenizes the string using " to enclose strings with spaces and \ to escape quotes in a string or other literal backslashes
    * 
    * @see io.forty11.j.utils.Args#parse(java.lang.String)
    */
   public static java.lang.String[] parse(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.utils.Args.parse(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#path(java.lang.Object)
    */
   public static java.lang.String path(java.lang.Object arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.path(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns a path string for file makeing sure that the string ends with a / if the file is a directory
    * 
    * @see io.forty11.j.api.Paths#path(java.io.File)
    */
   public static java.lang.String path(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.path(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to normalize a file path reference removing redundant wild cards and normalizing to "/" as the separator
    * 
    * @see io.forty11.j.api.Paths#path(java.lang.String)
    */
   public static java.lang.String path(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.path(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#paths(java.io.File)
    */
   public static io.forty11.j.it.PathIt paths(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#paths(java.net.URL)
    */
   public static io.forty11.j.it.PathIt paths(java.net.URL arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#paths(java.lang.String)
    */
   public static io.forty11.j.it.PathIt paths(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Paths#paths(java.util.zip.ZipFile)
    */
   public static io.forty11.j.it.PathIt paths(java.util.zip.ZipFile arg0)
   {
      try
      {
         return io.forty11.j.api.Paths.paths(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Copy all data from src to dst and close the streams
    * 
    * @see io.forty11.j.api.Streams#pipe(java.io.InputStream, java.io.OutputStream)
    */
   public static void pipe(java.io.InputStream arg0, java.io.OutputStream arg1)
   {
      try
      {
         io.forty11.j.api.Streams.pipe(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Copy all data from src to dst and close the reader/writer
    * 
    * @see io.forty11.j.api.Streams#pipe(java.io.Reader, java.io.Writer)
    */
   public static void pipe(java.io.Reader arg0, java.io.Writer arg1)
   {
      try
      {
         io.forty11.j.api.Streams.pipe(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Attempts to locate the stream as a file, url, or classpath resource and then reads it all as a string
    * 
    * @see io.forty11.j.api.Streams#read(java.lang.String)
    */
   public static java.lang.String read(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Streams.read(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Read all of the stream to a string and close the stream.  Throws RuntimeException instead of IOException
    * 
    * @see io.forty11.j.api.Streams#read(java.io.InputStream)
    */
   public static java.lang.String read(java.io.InputStream arg0)
   {
      try
      {
         return io.forty11.j.api.Streams.read(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#read(java.io.File)
    */
   public static java.lang.String read(java.io.File arg0)
   {
      try
      {
         return io.forty11.j.api.Files.read(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Performs string.matches() but also checks for null
    * 
    * @see io.forty11.j.api.Strings#regexMatch(java.lang.String, java.lang.String)
    */
   public static boolean regexMatch(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.regexMatch(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Strings#replace(java.lang.String, java.lang.String, java.lang.String)
    */
   public static java.lang.String replace(java.lang.String arg0, java.lang.String arg1, java.lang.String arg2)
   {
      try
      {
         return io.forty11.j.api.Strings.replace(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Replaces ${key} style text literals in str with values from the map
    * 
    * @see io.forty11.j.api.Strings#replaceAll(java.lang.String, java.util.Map)
    */
   public static java.lang.String replaceAll(java.lang.String arg0, java.util.Map arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.replaceAll(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#rethrow(java.lang.Throwable)
    */
   public static void rethrow(java.lang.Throwable arg0)
   {
      try
      {
         io.forty11.j.api.Lang.rethrow(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#rethrow(java.lang.String, java.lang.Throwable)
    */
   public static void rethrow(java.lang.String arg0, java.lang.Throwable arg1)
   {
      try
      {
         io.forty11.j.api.Lang.rethrow(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @see io.forty11.j.api.Shell#run(java.lang.String)
    */
   public static java.lang.String run(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Shell.run(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @see io.forty11.j.api.Shell#run(java.util.List)
    */
   public static java.lang.String run(java.util.List arg0)
   {
      try
      {
         return io.forty11.j.api.Shell.run(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Executes a system command and returns the content of that processes standard_out as a string
    * 
    * @see io.forty11.j.api.Shell#run([Ljava.lang.String;)
    */
   public static java.lang.String run(java.lang.String... arg0)
   {
      try
      {
         return io.forty11.j.api.Shell.run(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Finds the Field in the inheritance heirarchy and sets it
    * 
    * @see io.forty11.j.api.Lang#setField(java.lang.String, java.lang.Object, java.lang.Object)
    */
   public static void setField(java.lang.String arg0, java.lang.Object arg1, java.lang.Object arg2)
   {
      try
      {
         io.forty11.j.api.Lang.setField(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Hash the bytes with SHA-1
    * 
    * @see io.forty11.j.api.Strings#sha1([B)
    */
   public static java.lang.String sha1(byte[] arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.sha1(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Easy way to call Thread.sleep(long) without worrying about try/catch for InterruptedException
    * 
    * @see io.forty11.j.api.Lang#sleep(long)
    */
   public static void sleep(long arg0)
   {
      try
      {
         io.forty11.j.api.Lang.sleep(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Returns a lower cased string replacing "[^a-z0-9]+" with "-"
    * 
    * @see io.forty11.j.api.Strings#slugify(java.lang.String)
    */
   public static java.lang.String slugify(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.slugify(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Lang#splitLines(java.lang.String)
    */
   public static java.lang.String[] splitLines(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Lang.splitLines(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Lower case the first letter of the string
    * 
    * @see io.forty11.j.api.Strings#startLower(java.lang.String)
    */
   public static java.lang.String startLower(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.startLower(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Upper case the first letter of the string
    * 
    * @see io.forty11.j.api.Strings#startUpper(java.lang.String)
    */
   public static java.lang.String startUpper(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.startUpper(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#sterilizeFileName(java.lang.String)
    */
   public static java.lang.String sterilizeFileName(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Files.sterilizeFileName(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Strings#substring(java.lang.String, java.lang.String, int)
    */
   public static java.lang.String substring(java.lang.String arg0, java.lang.String arg1, int arg2)
   {
      try
      {
         return io.forty11.j.api.Strings.substring(arg0, arg1, arg2);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Less typing to call System.currentTimeMillis()
    * 
    * @see io.forty11.j.api.Lang#time()
    */
   public static long time()
   {
      try
      {
         return io.forty11.j.api.Lang.time();
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Return text with all '<' and '>' characters replaced by their escaped equivalents.
    * 
    * @see io.forty11.j.api.Strings#toDisableTags(java.lang.String)
    */
   public static java.lang.String toDisableTags(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.toDisableTags(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Pattern matches the string using ? to indicate any one single value and * to indicate any 0-n multiple values
    * 
    * @see io.forty11.j.api.Strings#wildcardMatch(java.lang.String, java.lang.String)
    */
   public static boolean wildcardMatch(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.wildcardMatch(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Converts a * and ? wildcard style patterns into regex style pattern
    * 
    * @see io.forty11.j.api.Strings#wildcardToRegex(java.lang.String)
    */
   public static java.lang.String wildcardToRegex(java.lang.String arg0)
   {
      try
      {
         return io.forty11.j.api.Strings.wildcardToRegex(arg0);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * Performans a word wrap limiting each line to the specified number of characters
    * 
    * @see io.forty11.j.api.Strings#wrap(java.lang.String, int)
    */
   public static java.lang.String wrap(java.lang.String arg0, int arg1)
   {
      try
      {
         return io.forty11.j.api.Strings.wrap(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#write(java.lang.String, java.lang.String)
    */
   public static void write(java.lang.String arg0, java.lang.String arg1)
   {
      try
      {
         io.forty11.j.api.Files.write(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

   /**
    * @see io.forty11.j.api.Files#write(java.io.File, java.lang.String)
    */
   public static void write(java.io.File arg0, java.lang.String arg1)
   {
      try
      {
         io.forty11.j.api.Files.write(arg0, arg1);
      }
      catch (Exception ex)
      {
         throw ex instanceof RuntimeException ? (RuntimeException) ex : new RuntimeException(ex);
      }
   }

}
